import y from"express";import{createServer as A}from"http";var f=class{users;favoritesMap;conversionsMap;userCurrentId;favoriteCurrentId;conversionCurrentId;constructor(){this.users=new Map,this.favoritesMap=new Map,this.conversionsMap=new Map,this.userCurrentId=1,this.favoriteCurrentId=1,this.conversionCurrentId=1}async getUser(e){return this.users.get(e)}async getUserByUsername(e){return Array.from(this.users.values()).find(s=>s.username===e)}async createUser(e){let s=this.userCurrentId++,t={...e,id:s};return this.users.set(s,t),t}async getFavorites(){return Array.from(this.favoritesMap.values()).sort((e,s)=>new Date(s.createdAt).getTime()-new Date(e.createdAt).getTime())}async createFavorite(e){let s=this.favoriteCurrentId++,r={...e,id:s,createdAt:new Date};return this.favoritesMap.set(s,r),r}async deleteFavorite(e){return this.favoritesMap.delete(e)}async getConversions(e=10){return Array.from(this.conversionsMap.values()).sort((s,t)=>new Date(t.createdAt).getTime()-new Date(s.createdAt).getTime()).slice(0,e)}async createConversion(e){let s=this.conversionCurrentId++,r={...e,id:s,createdAt:new Date};return this.conversionsMap.set(s,r),r}async clearConversions(){return this.conversionsMap.clear(),!0}},l=new f;import{insertConversionSchema as U,insertFavoriteSchema as M}from"@shared/schema";import{z as C}from"zod";async function S(o){return o.get("/api/timezones",(s,t)=>{let r=[{value:"Asia/Kolkata",label:"New Delhi (IST)"},{value:"America/New_York",label:"New York (EDT/EST)"},{value:"America/Chicago",label:"Chicago (CDT/CST)"},{value:"America/Denver",label:"Denver (MDT/MST)"},{value:"America/Los_Angeles",label:"Los Angeles (PDT/PST)"},{value:"Europe/London",label:"London (BST/GMT)"},{value:"Europe/Paris",label:"Paris (CEST/CET)"},{value:"Europe/Berlin",label:"Berlin (CEST/CET)"},{value:"Asia/Tokyo",label:"Tokyo (JST)"},{value:"Asia/Singapore",label:"Singapore (SGT)"},{value:"Asia/Dubai",label:"Dubai (GST)"},{value:"Australia/Sydney",label:"Sydney (AEST/AEDT)"},{value:"Pacific/Auckland",label:"Auckland (NZST/NZDT)"}],n=new Date,u=r.map(a=>{let i=new Date(n);try{let v=(new Date(i.toLocaleString("en-US",{timeZone:a.value})).getTime()-i.getTime())/(1e3*60),I=Math.floor(Math.abs(v)/60),P=Math.abs(v)%60,R=`${v>=0?"+":"-"}${I.toString().padStart(2,"0")}:${P.toString().padStart(2,"0")}`;return{...a,offset:R}}catch(m){return console.error(`Error calculating offset for ${a.value}:`,m),{...a,offset:"+00:00"}}});t.json(u)}),o.get("/api/favorites",async(s,t)=>{try{let r=await l.getFavorites();t.json(r)}catch{t.status(500).json({message:"Failed to fetch favorites"})}}),o.post("/api/favorites",async(s,t)=>{try{let r=M.parse(s.body),n=await l.createFavorite(r);t.status(201).json(n)}catch(r){r instanceof C.ZodError?t.status(400).json({message:"Invalid favorite data",errors:r.errors}):t.status(500).json({message:"Failed to create favorite"})}}),o.delete("/api/favorites/:id",async(s,t)=>{try{let r=parseInt(s.params.id);if(isNaN(r))return t.status(400).json({message:"Invalid ID format"});await l.deleteFavorite(r)?t.status(204).send():t.status(404).json({message:"Favorite not found"})}catch{t.status(500).json({message:"Failed to delete favorite"})}}),o.get("/api/conversions",async(s,t)=>{try{let r=s.query.limit?parseInt(s.query.limit):void 0,n=await l.getConversions(r);t.json(n)}catch{t.status(500).json({message:"Failed to fetch conversion history"})}}),o.post("/api/conversions",async(s,t)=>{try{let r=U.parse(s.body),n=await l.createConversion(r);t.status(201).json(n)}catch(r){r instanceof C.ZodError?t.status(400).json({message:"Invalid conversion data",errors:r.errors}):t.status(500).json({message:"Failed to save conversion